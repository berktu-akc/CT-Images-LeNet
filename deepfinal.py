# -*- coding: utf-8 -*-
"""deepFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/berktu-akc/7675426bee60537ed1fc7e8ff2c7fe5c/deepfinal.ipynb
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 
import pandas as pd
from glob import glob
import re
from skimage.io import imread

import keras

from google.colab import drive
from glob import glob
drive.mount('/content/drive')

path = "/content/drive/MyDrive/Data"
overview = glob(path + '/overview.csv')

overview = pd.read_csv(path + '/overview.csv')

overview.head(100)

image_list = glob(path + '/tiff_images/*.tif')

imread(image_list[0]).shape

np.expand_dims(imread(image_list[0])[::4,::4],0).shape

jimread = lambda x: np.expand_dims(imread(x)[::4,::4],0)

test_image = jimread(image_list[0])
plt.imshow(test_image[0])

test_image1 = jimread(image_list[1])
plt.imshow(test_image1[0])

test_image[0].shape

np.array(np.arange(65536)).reshape(256,256)[::4,::4].shape

np.expand_dims(np.array(np.arange(81)).reshape(9,9)[::4,::4],0).shape

check_contrast = re.compile(r'/tiff_images/ID_([\d]+)_AGE_[\d]+_CONTRAST_([\d]+)_CT.tif')

label = []
id_list = []
for image in image_list:
    id_list.append(check_contrast.findall(image)[0][0])
    label.append(check_contrast.findall(image)[0][1])

label_list = pd.DataFrame(label,id_list)

count = 0
for i in label_list[0]:
  if i == '1':
    count +=1

count

images = np.stack([jimread(i) for i in image_list],0)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(images, label_list, test_size=0.1, random_state=0)

n_train, depth, width, height = X_train.shape
n_test,_,_,_ = X_test.shape

input_shape = (width,height,depth)

input_shape

input_train = X_train.reshape((n_train, width,height,depth))
input_train.shape
input_train.astype('float32')
input_train = input_train / np.max(input_train)
input_train.max()

input_test = X_test.reshape(n_test, *input_shape)
input_test.astype('float32')
input_test = input_test / np.max(input_test)

output_train = keras.utils.np_utils.to_categorical(y_train, 2)
output_test = keras.utils.np_utils.to_categorical(y_test, 2)
output_train[5]

"""MODEL"""

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import Adam
from keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import BatchNormalization

batch_size = 20
epochs = 20

model = Sequential()
model.add(Conv2D(50, 5, activation='relu', input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(3, 3))) # 3x3 Maxpooling 
model.add(Conv2D(30, 4, activation='relu', input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2))) # 2x2 Maxpooling
model.add(Flatten())
model.add(Dense(units=50, activation='relu'))
model.add(Dense(units=10, activation='relu'))
model.add(Dense(2, activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=Adam(),
              metrics=['accuracy'])

history = model.fit(input_train, output_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1,
                    validation_data=(input_test, output_test))

score = model.evaluate(input_test, output_test, verbose=0)
score

model.save('model_lenet_cancer.h5')

model.predict(input_test)

pip install pydicom

import pydicom as dicom
import matplotlib.pylab as plt
# specify your image path
image_path = '/content/drive/MyDrive/Data/dicom_dir/ID_0001_AGE_0069_CONTRAST_1_CT.dcm'
ds = dicom.dcmread(image_path)
test1 = ds.pixel_array
plt.imshow(test1)

from skimage.transform import resize
IMG_PX_SIZE = 128
# resize to new size
resized1 = resize(test1, (IMG_PX_SIZE, IMG_PX_SIZE, 1), anti_aliasing=True)
resized1.shape

pred1 = model.predict(resized1.reshape(1,128,128,1))

round_prediction1 = np.round(pred1[0])
prediction = str('%.2f' % (pred1[0][1]*100) + '%')
prediction

round_prediction1 = np.round(pred1[0])
prob = str('%.2f' % (pred1[0][1]*100) + '%')
if round_prediction1[0] == 1:
    print('Normal Patient')
else:
    print(prob,"The patient has Cancer disease")
plt.imshow(test1, cmap="bone")

image_path = '/content/drive/MyDrive/Data/dicom_dir/ID_0090_AGE_0067_CONTRAST_0_CT.dcm'
ds = dicom.dcmread(image_path)
test90 = ds.pixel_array
plt.imshow(test90)

IMG_PX_SIZE = 128
# resize to new size
resized90 = resize(test90, (IMG_PX_SIZE, IMG_PX_SIZE, 1), anti_aliasing=True)
resized90.shape

pred90 = model.predict(resized90.reshape(1,128, 128, 1))

round_prediction90 = np.round(pred90[0])
prob = str('%.2f' % (pred90[0][1]*100) + '%')
if round_prediction90[0] == 1:
    print(prob, 'Normal Patient')
else:
    print(prob,"The patient has Cancer disease ")
plt.imshow(test90, cmap="bone")

image_path = '/content/drive/MyDrive/Data/dicom_dir/ID_0055_AGE_0071_CONTRAST_0_CT.dcm'
ds = dicom.dcmread(image_path)
test90 = ds.pixel_array
plt.imshow(test90)

IMG_PX_SIZE = 128
# resize to new size
resized90 = resize(test90, (IMG_PX_SIZE, IMG_PX_SIZE, 1), anti_aliasing=True)
resized90.shape

pred90 = model.predict(resized90.reshape(1,128, 128, 1))

round_prediction90 = np.round(pred90[0])
prob = str('%.2f' % (pred90[0][1]*100) + '%')
if round_prediction90[0] == 1:
    print(prob, 'Normal Patient')
else:
    print(prob,"The patient has Cancer disease ")
plt.imshow(test90, cmap="bone")

from sklearn.metrics import confusion_matrix

pred = model.predict(input_test)
pred[2]

pred = np.round(pred)

y_train = pd.DataFrame(pred)

y_train.pop(0)
y_train[1]

y_train[1] = pd.to_numeric(y_train[1], errors='coerce', downcast="integer")
type(y_train[1][1])

y_test[0] = pd.to_numeric(y_test[0], errors='coerce', downcast="integer")
type(y_test[0][1])

y_train.columns

y_test.columns = [1]

y_test

cm=confusion_matrix(y_test,y_train)

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay, f1_score

disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

f1_score(y_test, y_train)